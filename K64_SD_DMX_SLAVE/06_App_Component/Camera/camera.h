//============================================================================
//文件名称：camera.h
//功能概要：PTC06摄像头构件头文件
//版权所有：苏州大学飞思卡尔嵌入式中心(sumcu.suda.edu.cn)
//更新记录：2016-05-02   V1.0
//备注：
//		拍照前[可选指令]
//		设置图片尺寸(默认值：320X240，修改尺寸需复位)
//		设置图片压缩率(默认值：36)
//
//		拍照片的指令顺序：
//		1.清空图片缓存
//		2.拍照指令
//		3.读图片长度指令
//		4.读图片数据指令
//============================================================================
#ifndef  _CAMERA_H
#define  _CAMERA_H

#include "core_cm4.h"
#include "uart.h"
#include "gpio.h"
#include <string.h>
#include "includes.h"
//#include <stdio.h>


/*****************使用摄像头发送彩信宏开关*************************/
#ifndef USING_CAMERA_FOR_MMS
#define	USING_CAMERA_FOR_MMS		1
#endif

/******************使用SD卡存储图片宏开关*************************/
#ifndef USING_SAVE_SD
#define USING_SAVE_SD               0
#endif

#if USING_SAVE_SD
uint_8 camera_new_pathname(uint_8 *pname);
#endif

/******************与摄像头通信的串口设定*************************/
#ifndef CAMERA_UART
#define CAMERA_UART        UART_3
#endif

/******************摄像头调试的串口设定*************************/
//#if ECHO_CMD_DEBUG_INFO
#define CAMERA_DEBUG_UART        UART_0
//#endif

/******************摄像头串口接受缓冲区设定*************************/
#ifndef RX_BUFF_LEN
#define RX_BUFF_LEN    1000
#endif
/*****************************************************************************/
/******************摄像头串口接受缓冲区设定*************************/
#ifndef CAMERA_SEND_BUFF
#define CAMERA_SEND_BUFF    1000
#endif

/******************摄像头串口接受缓冲区设定*************************/
#ifndef CAMERA_POWER
#define CAMERA_POWER       (PORT_E)   //摄像头电源控制引脚
#endif


#define CAMERA_POWER_ON        1    //打开摄像头
#define CAMERA_POWER_OFF       0    //关闭摄像头



#define CLEAR_FRAME            1   	 //去掉返回图片数据携带的协议头和尾76 00 32 00
#define ECHO_CMD_DEBUG_INFO    0     //1，开启指令调试；0，关闭

#define ID_SERIAL_NUM       1        //序号在数组的所在位置

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

#if	USING_CAMERA_FOR_MMS            //条件宏，判断是否需要使用摄像头拍照发彩信





//硬件引脚定义
#define  camer_pwerH()    gpio_set(CAMERA_POWER,20,CAMERA_POWER_ON)
#define  camer_pwerL()    gpio_set(CAMERA_POWER,20,CAMERA_POWER_OFF)

//用户自定义宏变量
#define N_BYTE  512        //每次读取N_BYTE字节，N_BYTE必须是8的倍数

#define IMAGE_SIZE_160X120     0x22
#define IMAGE_SIZE_640X480     0x00
#define IMAGE_SIZE_320X240     0x11


#define COMPRESS_RATE_36       0x36   //该压缩率是默认压缩率，160x120和320x240可用此压缩率

#define COMPRESS_RATE_60       0x68   //640X480尺寸，默认压缩率36会占用45K左右的空间
                                      //选择60压缩率可将45K压缩到20K左右



typedef enum
{
    SERIAL_NUM_0 = 0x00,
    SERIAL_NUM_1,
    SERIAL_NUM_2,
    SERIAL_NUM_3,
    SERIAL_NUM_5,
    SERIAL_NUM_6,
    SERIAL_NUM_7,
    SERIAL_NUM_8,
    SERIAL_NUM_9,
    SERIAL_NUM_10
}nSerialNum;
extern const nSerialNum SerialNum_Byte;

extern uint_8 g_SerialNumber;
extern volatile uint_8 cameraReady;
extern uint_32 picLen;//图片长度


//串口驱动接口函数，移植时需要修改接口函数
/****************************************************************
函数名：cam_write
函数描述: 接口函数，写入控制摄像头的串口
输入参数：数据的首地址，长度
返回:无
******************************************************************/
void cam_write(const uint_8 *buf,uint_8 len);

/****************************************************************
函数名：cam_receiver
函数描述：接口函数，读取控制摄像头的串口
输出参数：接收数据的地址，长度
返回:接收到数据个数
******************************************************************/
uint_16 cam_receiver( uint_8 *buf,uint_16 send_len);


// 应用实例函数
/****************************************************************
函数名：CameraDemoApp
函数描述：摄像头应用实例
输入参数：序列号,图片尺寸
返回:成功返回1，失败返回0
******************************************************************/
uint_8 CameraDemoApp(uint_8 Serialnumber,uint_8 nCameraImageSize);

/****************************************************************
函数名：camera_init
函数描述：摄像头初始化
输入参数：序列号，需要设置的图片尺寸
返回:初始化成功返回1，初始化失败返回0
******************************************************************/
uint_8 camera_init(uint_8 Serialnumber,uint_8 nSetImageSize);

/****************************************************************
 函数名：send_cmd
 函数描述：发送指令并识别指令返回
 输入参数：指令的首地址，指令的长度，匹配指令的首地址，需验证的个数
 返回：成功返回1,失败返回0
******************************************************************/
uint_8 send_cmd(const uint_8 *cmd,uint_8 n0,const uint_8 *rev,uint_8 n1);

/****************************************************************
函数名：SetSerailNumber
函数描述: 修改协议中的序号
输入参数：目标指令缓存首地址，源指令首地址，源指令长度，
          目标应答缓存首地址，源应答首地址，源应答长度，需要修改的
          序号值
返回:无
******************************************************************/
void SetSerailNumber(uint_8 *DstCmd, const uint_8 *SrcCmd, uint_8 SrcCmdLength,
                     uint_8 *DstRcv, const uint_8 *SrcRcv, uint_8 SrcRcvLength,uint_8 nID);


//摄像头属性设置：复位/图片尺寸大小/图片压缩率
/****************************************************************
函数名：send_reset
函数描述：发送复位指令复位后要延时1-2秒
输入参数：序列号
返回:成功返回1 失败返回0
******************************************************************/
uint_8 send_reset(uint_8 Serialnumber);

/****************************************************************
函数名：current_photo_size
函数描述:读取当前设置的图片尺寸
输入参数：Serialnumber序列号，nImageSize传递图片尺寸的引用变量
返回:成功返回1,失败返回0
******************************************************************/
uint_8 current_photo_size(uint_8 Serialnumber,uint_8 * nImageSize);

/****************************************************************
函数名：send_photo_size
函数描述：设置拍照的图片尺寸（可选择：160X120,320X240,640X480）
输入参数：序列号，需要设置的图片尺寸
返回:成功返回1,失败返回0
******************************************************************/
uint_8 send_photo_size(uint_8 Serialnumber,uint_8 nImageSize);

/****************************************************************
函数名：send_compress_rate
函数描述：发送设置图片压缩率
输入参数：序列号
返回:成功返回1,失败返回0
******************************************************************/
uint_8 send_compress_rate(uint_8 Serialnumber,uint_8 nCompressRate);


//移动侦测控制函数

/****************************************************************
函数名：send_open_motion
函数描述：发送打开移动侦测指令
输入参数：序列号
返回:识别成功返回1 失败返回0
******************************************************************/
uint_8 send_motion_sensitivity(uint_8 Serialnumber);

/****************************************************************
函数名：send_open_motion
函数描述：发送打开移动侦测指令
输入参数：序列号
返回:识别成功返回1 失败返回0
******************************************************************/
uint_8 send_open_motion(uint_8 Serialnumber);

/****************************************************************
函数名：send_close_motion
函数描述：发送关闭移动侦测指令
输入参数：序列号
返回:识别成功返回1 失败返回0
******************************************************************/
uint_8 send_close_motion(uint_8 Serialnumber);

/****************************************************************
函数名：Motion_Detecte_Idle
函数描述: 等待移动侦测事件,该函数可在RS485同时接多个摄像头时，传递
          当前是第几个序列号上报移动侦测
输入参数：传递一个指针变量
返回:成功返回1 失败返回0
******************************************************************/
uint_8 Motion_Detecte_Idle(uint_8 *pSerialnumber);


//拍照处理函数

/****************************************************************
函数名：send_stop_photo
函数描述：清空图片缓存
输入参数：序列号
返回:成功返回1,失败返回0
******************************************************************/
uint_8 send_photoBuf_cls(uint_8 Serialnumber);

/****************************************************************
函数名：send_start_photo
函数描述：发送开始拍照的指令
输入参数：序列号
返回:识别成功返回1 失败返回0
******************************************************************/
uint_8 send_start_photo(uint_8 Serialnumber);

/****************************************************************
函数名：send_read_len
函数描述：读取拍照后的图片长度，即图片占用空间大小
输入参数：序列号
返回:图片的长度
******************************************************************/
uint_32 send_read_len(uint_8 Serialnumber);

/****************************************************************
函数名：send_get_photo
函数描述：读取图片数据
输入参数：读图片起始地址StaAdd,
          读取的长度readLen ，
          接收数据的缓冲区buf
          序列号
返回:成功返回1，失败返回0
FF D8 ... FF D9 是JPG的图片格式

1.一次性读取的回复格式：76 00 32 00 00 FF D8 ... FF D9 76 00 32 00 00

2.分次读取，每次读N字节,循环使用读取图片数据指令读取M次或者(M + 1)次读取完毕：
如第一次执行后回复格式
76 00 32 00 <FF D8 ... N> 76 00 32 00
下次执行读取指令时，起始地址需要偏移N字节，即上一次的末尾地址，回复格式
76 00 32 00 <... N> 76 00 32 00
......
76 00 32 00 <... FF D9> 76 00 32 00 //lastBytes <= N

Length = N * M 或 Length = N * M + lastBytes

******************************************************************/
uint_8 send_get_photo(uint_16 add,uint_16 read_len,uint_8 *buf,uint_8 Serialnumber);


/****************************************************************
函数名：isr_camera_re
函数描述：摄像头的串口接受中断
输出参数：
返回:
******************************************************************/
void isr_camera_re(void);

/****************************************************************
函数名：camera_delay_ms
函数描述：延时函数
输出参数：
返回:
******************************************************************/
void camera_delay_ms(uint_16 ms);

#endif

#endif	


