//=========================================================================
// 文件名称：ddiskio.h                                                         
// 功能概要：diskio构件源文件
// 版权所有: 苏州大学飞思卡尔嵌入式中心(sumcu.suda.edu.cn)
// 版本更新: 2011-12-14     V1.0        diskio构件初始版本
//          2011-12-20     V1.1        diskio构件优化修改
//=========================================================================

#ifndef _DISKIO_H_
#define _DISKIO_H_

#include "common.h"
#include  "sdhc.h"

//函数操作返回值
typedef enum {
	RES_OK = 0,		//0: 成功
	RES_ERROR,		//1: R/W 错误
	RES_WRPRT,		//2: 写保护
	RES_NOTRDY,		//3: 未就绪
	RES_PARERR		//4: 参数无效
} DRESULT;


//磁盘状态 

#define STA_NOINIT		0x01	//磁盘未初始化
#define STA_NODISK		0x02	//磁盘未插入
#define STA_PROTECT		0x04	//写保护


//以下是disk_ioctrl函数命令

//通用命令
#define CTRL_SYNC			0	//冲刷磁盘缓冲
#define GET_SECTOR_COUNT	1	//获取磁盘大小
#define GET_SECTOR_SIZE		2	//获取扇区大小
#define GET_BLOCK_SIZE		3	//获取块大小
#define CTRL_ERASE_SECTOR	4	//强制删除一个扇区
#define CTRL_DISK_TYPE      5   //获取磁盘类型

//=================接口函数声明============================================
//=========================================================================
//函数名称：disk_initialize                                                        
//功能概要：初始化磁盘（只支持磁盘0）                                                
//参数说明：drv:设备号                                                                                  
//函数返回：RES_OK：成功，0：失败                                                               
//=========================================================================
DRESULT disk_initialize (unsigned char drv);

//=========================================================================
//函数名称：disk_read                                                        
//功能概要：读磁盘扇区                                                
//参数说明：drv:设备号
//         buff:用于存储读取的数据的缓存区
//         sector:起始扇区号
//         count:扇区数
//函数返回：RES_OK：成功，其它：失败                                                              
//=========================================================================
DRESULT disk_read(uint8_t drv,uint8_t *buff,uint32_t sector,uint8_t count);

//=========================================================================
//函数名称：disk_write                                                        
//功能概要：写磁盘扇区                                                
//参数说明：drv:设备号
//         buff:待写入SD卡的数据的缓存区首地址
//         sector:起始扇区号
//         count:扇区数
//函数返回：RES_OK：成功，其它：失败                                                              
//=========================================================================
DRESULT disk_write(uint8_t drv,const uint8_t *buff,uint32_t sector,uint8_t count);

//=========================================================================
//函数名称：disk_ioctl                                                        
//功能概要：磁盘控制                                                
//参数说明：drv:设备号
//         ctrl:命令
//         buff:数据的缓存区首地址
//函数返回：RES_OK：成功，其它：失败                                                              
//=========================================================================
DRESULT disk_ioctl(uint8_t drv,uint8_t ctrl,void  *buff);

//=========================================================================
//函数名称：disk_status                                                        
//功能概要：返回磁盘状态                                              
//参数说明：drv：磁盘号
//函数返回：状态                                                        
//=========================================================================
unsigned char disk_status (uint8_t drv);

#endif
